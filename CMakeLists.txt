PROJECT(convnet)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

IF(COMMAND CMAKE_POLICY)
     CMAKE_POLICY(SET CMP0016 NEW)
ENDIF(COMMAND CMAKE_POLICY)

SET(CMAKE_SKIP_BUILD_RPATH TRUE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)

SET(CMAKE_MODULE_PATH "cmake/;${CMAKE_MODULE_PATH}")

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

SET(CUDA_PROPAGATE_HOST_FLAGS OFF CACHE STRING "" FORCE)

SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -O3 -mtune=native")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++11 -mtune=native")
SET(CUDA_NVCC_FLAGS "-O3 --use_fast_math -gencode=arch=compute_20,code=sm_20
                                         -gencode=arch=compute_30,code=sm_30
                                         -gencode=arch=compute_35,code=sm_35")

# Set a default build type if none was specified
IF(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  MESSAGE(STATUS "Setting build type to 'Release' as none was specified.")
  SET(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo")
ENDIF()

SET(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS}")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS} -g")

#####
# find OpenMP library
FIND_PACKAGE(OpenMP REQUIRED)
IF(OPENMP_FOUND)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  MESSAGE(STATUS "OpenMP found.")
ENDIF()

#####
# find CUDA
FIND_PACKAGE(CUDA REQUIRED)
INCLUDE_DIRECTORIES(${CUDA_TOOLKIT_INCLUDE})

#####
# find OPENBLAS library
FIND_PATH(OPENBLAS_INCLUDE_DIR cblas.h PATH_SUFFIXES openblas)
INCLUDE_DIRECTORIES(${OPENBLAS_INCLUDE_DIR})
FIND_LIBRARY(CBLAS_LIBRARY NAMES openblas)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(CBLAS DEFAULT_MSG CBLAS_LIBRARY)
MARK_AS_ADVANCED(CBLAS_LIBRARY)

#####
# find CIMG library
FIND_PATH(CIMG_INCLUDE_DIR CImg.h REQUIRED)
INCLUDE_DIRECTORIES(${CIMG_INCLUDE_DIR})
IF(CIMG_INCLUDE_DIR)
  MESSAGE(STATUS "CImg found.")
ENDIF()

#####
# find TCLAP library
FIND_PATH(TCLAP_INCLUDE_DIR CmdLine.h REQUIRED PATH_SUFFIXES tclap)
INCLUDE_DIRECTORIES(${TCLAP_INCLUDE_DIR})
IF(TCLAP_INCLUDE_DIR)
  MESSAGE(STATUS "TCLAP found.")
ENDIF()


INCLUDE(FindPkgConfig REQUIRED)

#####
# find HDF5 library
FIND_PACKAGE(HDF5 QUIET REQUIRED)
IF(HDF5_FOUND)
  INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
  MESSAGE(STATUS "HDF5 found.")
ENDIF()

#####
# find JPEG library
FIND_PACKAGE(JPEG COMPONENTS REQUIRED)
IF(JPEG_FOUND)
  INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIRS})
  MESSAGE(STATUS "JPEG found.")
ENDIF()

#####
# find X11 library
FIND_PACKAGE(X11 COMPONENTS REQUIRED)
IF(X11_FOUND)
  INCLUDE_DIRECTORIES(${X11_INCLUDE_DIRS})
  MESSAGE(STATUS "X11 found.")
ENDIF()

#####
# find google protobuf
IF(PKG_CONFIG_FOUND)
    INCLUDE(FindPkgConfig)
    PKG_CHECK_MODULES(PROTOBUF REQUIRED protobuf)
    INCLUDE_DIRECTORIES(${PROTOBUF_INCLUDE_DIRS})
ENDIF()

#####
# find protobuf compiler
FIND_PROGRAM(PROTOC_EXE NAMES protoc REQUIRED)
IF(NOT PROTOC_EXE)
    MESSAGE(FATAL_ERROR "Could not find protoc rule compiler.")
ELSE()
    MESSAGE(STATUS "Found protobuf compiler: " ${PROTOC_EXE})
ENDIF()

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(cpu)

